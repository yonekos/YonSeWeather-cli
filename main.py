from __future__ import annotations

import argparse
import os
import sys
from dataclasses import dataclass
from datetime import datetime, timedelta, timezone
from typing import Any, Dict, Iterable, List, Optional, Tuple

import json
from pathlib import Path

import requests
from colorama import Fore, Style, init

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è Windows
init(autoreset=True)

API_URL = "https://api.openweathermap.org/data/2.5/weather"
FORECAST_URL = "https://api.openweathermap.org/data/2.5/forecast"
ONECALL_URL = "https://api.openweathermap.org/data/3.0/onecall"
AIR_QUALITY_URL = "https://api.openweathermap.org/data/2.5/air_pollution"
DEFAULT_LANGUAGE = "ru"
DEFAULT_UNITS = "metric"
DEFAULT_TIMEOUT = 10
ENV_API_KEY = "OPENWEATHER_API_KEY"
DEFAULT_API_KEY = "28d56bf4dcd8a7981f7266b0779e38b9"
CACHE_DIR = Path.home() / ".yonse_weather_cache"


UNITS_LABELS: Dict[str, Tuple[str, str]] = {
    "metric": ("¬∞C", "–º/—Å"),
    "imperial": ("¬∞F", "mph"),
    "standard": ("K", "–º/—Å"),
}


WEATHER_EMOJI = {
    "clear sky": "‚òÄÔ∏è",
    "few clouds": "üå§Ô∏è",
    "scattered clouds": "‚õÖ",
    "broken clouds": "‚òÅÔ∏è",
    "overcast clouds": "‚òÅÔ∏è",
    "shower rain": "üåßÔ∏è",
    "rain": "üåßÔ∏è",
    "light rain": "üå¶Ô∏è",
    "moderate rain": "üåßÔ∏è",
    "heavy intensity rain": "‚õàÔ∏è",
    "thunderstorm": "‚õàÔ∏è",
    "snow": "‚ùÑÔ∏è",
    "mist": "üå´Ô∏è",
    "fog": "üå´Ô∏è",
    "haze": "üå´Ô∏è",
}


AIR_QUALITY_LABELS = {
    1: ("–û—Ç–ª–∏—á–Ω–æ–µ", Fore.GREEN),
    2: ("–•–æ—Ä–æ—à–µ–µ", Fore.LIGHTGREEN_EX),
    3: ("–£–º–µ—Ä–µ–Ω–Ω–æ–µ", Fore.YELLOW),
    4: ("–ü–ª–æ—Ö–æ–µ", Fore.LIGHTRED_EX),
    5: ("–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ", Fore.RED),
}


UV_LABELS = [
    (0, 2, "–ù–∏–∑–∫–∏–π", Fore.GREEN),
    (3, 5, "–£–º–µ—Ä–µ–Ω–Ω—ã–π", Fore.YELLOW),
    (6, 7, "–í—ã—Å–æ–∫–∏–π", Fore.LIGHTYELLOW_EX),
    (8, 10, "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π", Fore.LIGHTRED_EX),
    (11, float('inf'), "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π", Fore.RED),
]


class WeatherError(RuntimeError):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ—à–∏–±–∫–∞, –æ–∑–Ω–∞—á–∞—é—â–∞—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∞."""


@dataclass(frozen=True)
class WeatherSnapshot:
    """–°–Ω–∏–º–æ–∫ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç OpenWeatherMap."""

    city: str
    country: Optional[str]
    description: str
    temperature: float
    feels_like: float
    pressure: int
    humidity: int
    wind_speed: float
    wind_direction: Optional[int]
    cloudiness: int
    temperature_min: float
    temperature_max: float
    visibility: Optional[int]
    sunrise: Optional[datetime]
    sunset: Optional[datetime]
    tz: timezone
    units: str
    uv_index: Optional[float] = None
    air_quality_index: Optional[int] = None
    air_quality_components: Optional[Dict[str, float]] = None
    weather_alerts: Optional[List[Dict[str, Any]]] = None


@dataclass(frozen=True)
class ForecastItem:
    """–û–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã."""

    timestamp: datetime
    temperature: float
    feels_like: float
    description: str
    humidity: int
    wind_speed: float
    cloudiness: int
    precipitation_probability: float
    rain_volume: Optional[float] = None
    snow_volume: Optional[float] = None


def parse_arguments(argv: Optional[Iterable[str]] = None) -> argparse.Namespace:
    """–†–∞–∑–æ–±—Ä–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""

    parser = argparse.ArgumentParser(
        description="–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –∏–∑ OpenWeatherMap",
    )
    parser.add_argument(
        "city",
        nargs="?",
        help="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞). –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–æ",  # noqa: E501
    )
    parser.add_argument(
        "--api-key",
        dest="api_key",
        help=(
            "API –∫–ª—é—á OpenWeatherMap. –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é "
            f"–æ–∫—Ä—É–∂–µ–Ω–∏—è {ENV_API_KEY}."
        ),
    )
    parser.add_argument(
        "--units",
        choices=sorted(UNITS_LABELS),
        default=DEFAULT_UNITS,
        help="–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è (metric, imperial –∏–ª–∏ standard)",
    )
    parser.add_argument(
        "--lang",
        default=DEFAULT_LANGUAGE,
        help="–Ø–∑—ã–∫ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, ru, en)",
    )
    parser.add_argument(
        "--timeout",
        type=float,
        default=DEFAULT_TIMEOUT,
        help="–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
    )
    parser.add_argument(
        "--forecast",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π",
    )
    parser.add_argument(
        "--hourly",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞",
    )
    parser.add_argument(
        "--no-color",
        action="store_true",
        help="–û—Ç–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥",
    )
    parser.add_argument(
        "--extended",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (UV-–∏–Ω–¥–µ–∫—Å, –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞)",
    )
    parser.add_argument(
        "--no-cache",
        action="store_true",
        help="–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à",
    )
    parser.add_argument(
        "--chart",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å ASCII-–≥—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
    )
    return parser.parse_args(argv)


def main(argv: Optional[Iterable[str]] = None) -> int:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã."""

    args = parse_arguments(argv)

    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ colorama –µ—Å –Ω–∞–¥
    if args.no_color:
        init(strip=True, convert=False)

    city = args.city or input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: ").strip()
    if not city:
        print("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return 1

    try:
        api_key = resolve_api_key(args.api_key)

        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–≥–æ–¥–∞
        payload = fetch_weather(
            city=city,
            api_key=api_key,
            units=args.units,
            language=args.lang,
            timeout=args.timeout,
            use_cache=not args.no_cache,
        )
        snapshot = parse_weather_payload(payload, fallback_city=city, units=args.units)

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if args.extended:
            try:
                lat = payload.get("coord", {}).get("lat")
                lon = payload.get("coord", {}).get("lon")
                if lat and lon:
                    
                    air_data = fetch_air_quality(lat, lon, api_key, args.timeout)
                    snapshot = add_air_quality_to_snapshot(snapshot, air_data)

                    
                    try:
                        onecall_data = fetch_onecall(lat, lon, api_key, args.units, args.timeout)
                        snapshot = add_uv_and_alerts_to_snapshot(snapshot, onecall_data)
                    except WeatherError:
                        pass  
            except Exception as e:
                print(f"{Fore.YELLOW}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}{Style.RESET_ALL}")

        # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
        print(format_weather(snapshot, use_color=not args.no_color))

        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
        if args.forecast:
            forecast_data = fetch_forecast(
                city=city,
                api_key=api_key,
                units=args.units,
                language=args.lang,
                timeout=args.timeout,
                use_cache=not args.no_cache,
            )
            forecast_items = parse_forecast_payload(forecast_data, snapshot.tz, args.units)
            print("\n" + format_daily_forecast(forecast_items, args.units, use_color=not args.no_color))

        # –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑
        if args.hourly:
            forecast_data = fetch_forecast(
                city=city,
                api_key=api_key,
                units=args.units,
                language=args.lang,
                timeout=args.timeout,
                use_cache=not args.no_cache,
            )
            forecast_items = parse_forecast_payload(forecast_data, snapshot.tz, args.units)
            print("\n" + format_hourly_forecast(forecast_items, args.units, use_color=not args.no_color))

            
            if args.chart:
                chart = create_temperature_chart(forecast_items)
                if chart:
                    print("\n" + chart)

        
        elif args.chart and args.forecast:
            forecast_data = fetch_forecast(
                city=city,
                api_key=api_key,
                units=args.units,
                language=args.lang,
                timeout=args.timeout,
                use_cache=not args.no_cache,
            )
            forecast_items = parse_forecast_payload(forecast_data, snapshot.tz, args.units)
            chart = create_temperature_chart(forecast_items)
            if chart:
                print("\n" + chart)

    except WeatherError as exc:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞: {exc}{Style.RESET_ALL}")
        return 1
    except requests.RequestException as exc:
        print(f"{Fore.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: {exc}{Style.RESET_ALL}")
        return 1

    print(f"\n{Fore.CYAN}‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ YonSeWeather! ‚ú®{Style.RESET_ALL}")
    return 0


def resolve_api_key(cli_key: Optional[str]) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å API-–∫–ª—é—á –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è."""

    api_key = cli_key or os.getenv(ENV_API_KEY) or DEFAULT_API_KEY
    if not api_key:
        raise WeatherError(
            "API –∫–ª—é—á OpenWeatherMap –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ --api-key "
            f"–∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è {ENV_API_KEY}."
        )
    return api_key


def get_cache_path(cache_key: str) -> Path:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞."""
    CACHE_DIR.mkdir(exist_ok=True)
    return CACHE_DIR / f"{cache_key}.json"


def load_from_cache(cache_key: str, max_age_minutes: int = 10) -> Optional[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏."""
    cache_path = get_cache_path(cache_key)
    if not cache_path.exists():
        return None

    try:
        cache_age = datetime.now().timestamp() - cache_path.stat().st_mtime
        if cache_age > max_age_minutes * 60:
            return None

        with cache_path.open("r", encoding="utf-8") as f:
            return json.load(f)
    except (IOError, json.JSONDecodeError):
        return None


def save_to_cache(cache_key: str, data: Dict[str, Any]) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à."""
    try:
        cache_path = get_cache_path(cache_key)
        with cache_path.open("w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except IOError:
        pass  


def fetch_weather(
    *,
    city: str,
    api_key: str,
    units: str,
    language: str,
    timeout: float,
    use_cache: bool = True,
) -> Dict[str, Any]:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ OpenWeatherMap –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è."""

    cache_key = f"weather_{city}_{units}_{language}"
    if use_cache:
        cached = load_from_cache(cache_key)
        if cached:
            return cached

    params = {
        "q": city,
        "appid": api_key,
        "units": units,
        "lang": language,
    }

    try:
        response = requests.get(API_URL, params=params, timeout=timeout)
    except requests.RequestException as exc:  # pragma: no cover - —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
        raise WeatherError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å OpenWeatherMap") from exc

    data = decode_response(response)
    check_for_api_error(data, response.status_code)

    if use_cache:
        save_to_cache(cache_key, data)

    return data


def fetch_forecast(
    *,
    city: str,
    api_key: str,
    units: str,
    language: str,
    timeout: float,
    use_cache: bool = True,
) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π."""

    cache_key = f"forecast_{city}_{units}_{language}"
    if use_cache:
        cached = load_from_cache(cache_key, max_age_minutes=30)
        if cached:
            return cached

    params = {
        "q": city,
        "appid": api_key,
        "units": units,
        "lang": language,
    }

    try:
        response = requests.get(FORECAST_URL, params=params, timeout=timeout)
    except requests.RequestException as exc:
        raise WeatherError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã") from exc

    data = decode_response(response)
    check_for_api_error(data, response.status_code)

    if use_cache:
        save_to_cache(cache_key, data)

    return data


def fetch_air_quality(lat: float, lon: float, api_key: str, timeout: float) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞."""

    params = {
        "lat": lat,
        "lon": lon,
        "appid": api_key,
    }

    try:
        response = requests.get(AIR_QUALITY_URL, params=params, timeout=timeout)
    except requests.RequestException as exc:
        raise WeatherError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞") from exc

    data = decode_response(response)
    return data


def fetch_onecall(
    lat: float, lon: float, api_key: str, units: str, timeout: float
) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ OneCall API."""

    params = {
        "lat": lat,
        "lon": lon,
        "appid": api_key,
        "units": units,
        "exclude": "minutely",
    }

    try:
        response = requests.get(ONECALL_URL, params=params, timeout=timeout)
    except requests.RequestException as exc:
        raise WeatherError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ OneCall") from exc

    data = decode_response(response)
    check_for_api_error(data, response.status_code)
    return data


def decode_response(response: requests.Response) -> Dict[str, Any]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ JSON –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫–∏."""

    try:
        return response.json()
    except ValueError as exc:
        raise WeatherError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç OpenWeatherMap") from exc


def check_for_api_error(payload: Dict[str, Any], status_code: int) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É."""

    code = payload.get("cod", status_code)
    try:
        numeric_code = int(code)
    except (TypeError, ValueError) as exc:
        raise WeatherError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ API: {code!r}") from exc

    if numeric_code != 200:
        message = payload.get("message") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ OpenWeatherMap"
        raise WeatherError(f"OpenWeatherMap –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {message}")


def parse_weather_payload(
    payload: Dict[str, Any],
    *,
    fallback_city: str,
    units: str,
) -> WeatherSnapshot:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å :class:`WeatherSnapshot` –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–≥–æ–¥—ã."""

    try:
        main_block = payload["main"]
        sys_block = payload["sys"]
    except KeyError as exc:
        raise WeatherError("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö") from exc

    weather_list: List[Dict[str, Any]] = payload.get("weather") or []
    weather_details = weather_list[0] if weather_list else {}
    description = _format_description(weather_details.get("description"))

    timezone_offset = payload.get("timezone", 0)
    tz = timezone(timedelta(seconds=timezone_offset))

    sunrise = _to_local_time(sys_block.get("sunrise"), tz)
    sunset = _to_local_time(sys_block.get("sunset"), tz)

    temperature = _required_float(main_block, "temp")
    feels_like = _required_float(main_block, "feels_like")
    pressure = _required_int(main_block, "pressure")
    humidity = _required_int(main_block, "humidity")
    wind_speed = _float_with_default(_safe_get(payload.get("wind"), "speed"), default=0.0)
    wind_direction = _optional_int(_safe_get(payload.get("wind"), "deg"))
    cloudiness = _int_with_default(_safe_get(payload.get("clouds"), "all"), default=0)
    temperature_min = _float_with_default(main_block.get("temp_min"), default=temperature)
    temperature_max = _float_with_default(main_block.get("temp_max"), default=temperature)
    visibility = _optional_int(payload.get("visibility"))

    snapshot = WeatherSnapshot(
        city=payload.get("name") or fallback_city,
        country=sys_block.get("country"),
        description=description,
        temperature=temperature,
        feels_like=feels_like,
        pressure=pressure,
        humidity=humidity,
        wind_speed=wind_speed,
        wind_direction=wind_direction,
        cloudiness=cloudiness,
        temperature_min=temperature_min,
        temperature_max=temperature_max,
        visibility=visibility,
        sunrise=sunrise,
        sunset=sunset,
        tz=tz,
        units=units,
    )
    return snapshot


def _safe_get(block: Optional[Dict[str, Any]], key: str, default: Any = None) -> Any:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è, –≤–æ–∑–≤—Ä–∞—â–∞—è ``default`` –µ—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç."""

    if not isinstance(block, dict):
        return default
    return block.get(key, default)


def _optional_int(value: Any) -> Optional[int]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ ``int`` –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å ``None``."""

    if value is None:
        return None
    try:
        return int(value)
    except (TypeError, ValueError) as exc:
        raise WeatherError(f"–û–∂–∏–¥–∞–ª–æ—Å—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –ø–æ–ª—É—á–µ–Ω–æ {value!r}") from exc


def _required_float(block: Dict[str, Any], key: str) -> float:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ``float`` –∏–∑ —Å–ª–æ–≤–∞—Ä—è."""

    try:
        value = block[key]
    except KeyError as exc:
        raise WeatherError(f"–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ {key!r}") from exc
    try:
        return float(value)
    except (TypeError, ValueError) as exc:
        raise WeatherError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ {key!r}: {value!r}") from exc


def _required_int(block: Dict[str, Any], key: str) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ``int`` –∏–∑ —Å–ª–æ–≤–∞—Ä—è."""

    try:
        value = block[key]
    except KeyError as exc:
        raise WeatherError(f"–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ {key!r}") from exc
    try:
        return int(value)
    except (TypeError, ValueError) as exc:
        raise WeatherError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ {key!r}: {value!r}") from exc


def _optional_float(value: Any) -> Optional[float]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ ``float`` –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å ``None``."""

    if value is None:
        return None
    try:
        return float(value)
    except (TypeError, ValueError) as exc:
        raise WeatherError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value!r}") from exc


def _float_with_default(value: Any, *, default: float) -> float:
    """–í–µ—Ä–Ω—É—Ç—å ``float`` —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""

    coerced = _optional_float(value)
    return default if coerced is None else coerced


def _int_with_default(value: Any, *, default: int) -> int:
    """–í–µ—Ä–Ω—É—Ç—å ``int`` —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""

    coerced = _optional_int(value)
    return default if coerced is None else coerced


def _format_description(description: Optional[str]) -> str:
    """–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã."""

    if not description:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    return description.strip().capitalize()


def _to_local_time(timestamp: Optional[int], tz: timezone) -> Optional[datetime]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å Unix timestamp –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è."""

    if timestamp is None:
        return None
    return datetime.fromtimestamp(timestamp, tz=timezone.utc).astimezone(tz)


def format_weather(snapshot: WeatherSnapshot, use_color: bool = True) -> str:
    """–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≥–æ–¥–Ω—ã–π —Å–Ω–∏–º–æ–∫ –≤ –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."""

    temp_unit, wind_unit = UNITS_LABELS.get(snapshot.units, ("¬∞", "–º/—Å"))
    location = snapshot.city
    if snapshot.country:
        location = f"{location}, {snapshot.country}"

    
    emoji = WEATHER_EMOJI.get(snapshot.description.lower(), "üåà")
    header = f"{emoji} –ü–æ–≥–æ–¥–∞ –æ—Ç YonSe –≤ –≥–æ—Ä–æ–¥–µ {location}"
    if use_color:
        header = f"{Fore.CYAN}{Style.BRIGHT}{header}{Style.RESET_ALL}"

    timezone_label = _format_timezone(snapshot.tz)

    
    temp_color = Fore.WHITE
    if use_color:
        if snapshot.temperature < 0:
            temp_color = Fore.BLUE
        elif snapshot.temperature < 10:
            temp_color = Fore.CYAN
        elif snapshot.temperature < 20:
            temp_color = Fore.GREEN
        elif snapshot.temperature < 30:
            temp_color = Fore.YELLOW
        else:
            temp_color = Fore.RED

    
    humidity_bar = create_humidity_bar(snapshot.humidity, width=25)
    wind_arrow = create_wind_arrow(snapshot.wind_direction) if snapshot.wind_direction is not None else ""

    rows: List[Tuple[str, str, str]] = [
        ("üå§Ô∏è  –ö—Ä–∞—Ç–∫–æ", snapshot.description, Fore.WHITE),
        ("üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", f"{temp_color}{snapshot.temperature:.1f} {temp_unit}{Style.RESET_ALL if use_color else ''}", Fore.WHITE),
        ("ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫", f"{temp_color}{snapshot.feels_like:.1f} {temp_unit}{Style.RESET_ALL if use_color else ''}", Fore.WHITE),
        (
            "üìä –î–∞–≤–ª–µ–Ω–∏–µ",
            f"{snapshot.pressure} –≥–ü–∞ (~{snapshot.pressure * 0.75006:.0f} –º–º —Ä—Ç. —Å—Ç.)",
            Fore.WHITE,
        ),
        ("üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å", humidity_bar, Fore.LIGHTBLUE_EX if use_color else Fore.WHITE),
        ("üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞", f"{snapshot.wind_speed:.1f} {wind_unit}", Fore.LIGHTCYAN_EX if use_color else Fore.WHITE),
    ]

    if snapshot.wind_direction is not None:
        rows.append(
            (
                "üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞",
                f"{wind_arrow} {snapshot.wind_direction}¬∞ ({_format_wind_direction(snapshot.wind_direction)})",
                Fore.WHITE,
            )
        )

    rows.extend(
        [
            ("‚òÅÔ∏è  –û–±–ª–∞—á–Ω–æ—Å—Ç—å", f"{snapshot.cloudiness}%", Fore.WHITE),
            ("üîΩ –ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", f"{snapshot.temperature_min:.1f} {temp_unit}", Fore.BLUE if use_color else Fore.WHITE),
            ("üîº –ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", f"{snapshot.temperature_max:.1f} {temp_unit}", Fore.RED if use_color else Fore.WHITE),
        ]
    )

    if snapshot.visibility is not None:
        rows.append(("üëÅÔ∏è  –í–∏–¥–∏–º–æ—Å—Ç—å", _format_visibility(snapshot.visibility), Fore.WHITE))

    rows.extend(
        [
            ("üåÖ –í–æ—Å—Ö–æ–¥", _format_time(snapshot.sunrise, timezone_label), Fore.LIGHTYELLOW_EX if use_color else Fore.WHITE),
            ("üåá –ó–∞–∫–∞—Ç", _format_time(snapshot.sunset, timezone_label), Fore.LIGHTMAGENTA_EX if use_color else Fore.WHITE),
        ]
    )

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if snapshot.uv_index is not None:
        uv_label, uv_color = get_uv_label(snapshot.uv_index)
        uv_str = f"{snapshot.uv_index:.1f} ({uv_label})"
        if use_color:
            uv_str = f"{uv_color}{uv_str}{Style.RESET_ALL}"
        rows.append(("‚òÄÔ∏è  UV-–∏–Ω–¥–µ–∫—Å", uv_str, Fore.WHITE))

    if snapshot.air_quality_index is not None:
        aqi_label, aqi_color = AIR_QUALITY_LABELS.get(
            snapshot.air_quality_index, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", Fore.WHITE)
        )
        aqi_str = f"{snapshot.air_quality_index} ({aqi_label})"
        if use_color:
            aqi_str = f"{aqi_color}{aqi_str}{Style.RESET_ALL}"
        rows.append(("üå¨Ô∏è  –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞", aqi_str, Fore.WHITE))

        
        if snapshot.air_quality_components:
            comp = snapshot.air_quality_components
            if "pm2_5" in comp:
                rows.append(("   ‚Ä¢ PM2.5", f"{comp['pm2_5']:.1f} Œºg/m¬≥", Fore.LIGHTBLACK_EX if use_color else Fore.WHITE))
            if "pm10" in comp:
                rows.append(("   ‚Ä¢ PM10", f"{comp['pm10']:.1f} Œºg/m¬≥", Fore.LIGHTBLACK_EX if use_color else Fore.WHITE))

    key_width = max(len(key) for key, _, _ in rows)
    lines = [header, "=" * 70]

    for key, value, color in rows:
        if use_color and color != Fore.WHITE and "Style.RESET_ALL" not in value:
            lines.append(f"{key:<{key_width}} : {color}{value}{Style.RESET_ALL}")
        else:
            lines.append(f"{key:<{key_width}} : {value}")

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ
    if snapshot.weather_alerts:
        lines.append("\n" + ("=" * 70))
        alert_header = "‚ö†Ô∏è  –ü–û–ì–û–î–ù–´–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø"
        if use_color:
            alert_header = f"{Fore.RED}{Style.BRIGHT}{alert_header}{Style.RESET_ALL}"
        lines.append(alert_header)
        lines.append("=" * 70)

        for alert in snapshot.weather_alerts:
            event = alert.get("event", "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
            description = alert.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
            start = alert.get("start")
            end = alert.get("end")

            if use_color:
                lines.append(f"{Fore.YELLOW}‚Ä¢ {event}{Style.RESET_ALL}")
            else:
                lines.append(f"‚Ä¢ {event}")

            if start and end:
                start_time = datetime.fromtimestamp(start).strftime("%d.%m %H:%M")
                end_time = datetime.fromtimestamp(end).strftime("%d.%m %H:%M")
                lines.append(f"  –ü–µ—Ä–∏–æ–¥: {start_time} - {end_time}")

            lines.append(f"  {description[:200]}...")

    return "\n".join(lines)


def _format_wind_direction(degrees: int) -> str:
    """–í–µ—Ä–Ω—É—Ç—å –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –ø–æ –≥—Ä–∞–¥—É—Å–∞–º."""

    directions = [
        "–°", "–°–°–í", "–°–í", "–í–°–í", "–í", "–í–Æ–í", "–Æ–í", "–Æ–Æ–í",
        "–Æ", "–Æ–Æ–ó", "–Æ–ó", "–ó–Æ–ó", "–ó", "–ó–°–ó", "–°–ó", "–°–°–ó",
    ]
    index = int((degrees % 360) / 22.5 + 0.5) % len(directions)
    return directions[index]


def _format_visibility(visibility: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ –º–µ—Ç—Ä–∞—Ö –∏ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö."""

    kilometres = visibility / 1000
    return f"{visibility} –º ({kilometres:.1f} –∫–º)"


def _format_time(moment: Optional[datetime], timezone_label: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞/–∑–∞–∫–∞—Ç–∞."""

    if moment is None:
        return "‚Äî"
    return f"{moment.strftime('%H:%M:%S')} ({timezone_label})"


def _format_timezone(tz: timezone) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç ``timezone`` –≤ —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ UTC¬±HH:MM."""

    offset = tz.utcoffset(None)
    if offset is None:
        return "UTC"
    total_minutes = int(offset.total_seconds() // 60)
    sign = "+" if total_minutes >= 0 else "-"
    total_minutes = abs(total_minutes)
    hours, minutes = divmod(total_minutes, 60)
    return f"UTC{sign}{hours:02d}:{minutes:02d}"


def add_air_quality_to_snapshot(
    snapshot: WeatherSnapshot, air_data: Dict[str, Any]
) -> WeatherSnapshot:
    """–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ –≤ —Å–Ω–∏–º–æ–∫."""
    air_list = air_data.get("list", [])
    if not air_list:
        return snapshot

    air_info = air_list[0]
    aqi = air_info.get("main", {}).get("aqi")
    components = air_info.get("components", {})

    
    return WeatherSnapshot(
        city=snapshot.city,
        country=snapshot.country,
        description=snapshot.description,
        temperature=snapshot.temperature,
        feels_like=snapshot.feels_like,
        pressure=snapshot.pressure,
        humidity=snapshot.humidity,
        wind_speed=snapshot.wind_speed,
        wind_direction=snapshot.wind_direction,
        cloudiness=snapshot.cloudiness,
        temperature_min=snapshot.temperature_min,
        temperature_max=snapshot.temperature_max,
        visibility=snapshot.visibility,
        sunrise=snapshot.sunrise,
        sunset=snapshot.sunset,
        tz=snapshot.tz,
        units=snapshot.units,
        uv_index=snapshot.uv_index,
        air_quality_index=aqi,
        air_quality_components=components,
        weather_alerts=snapshot.weather_alerts,
    )


def add_uv_and_alerts_to_snapshot(
    snapshot: WeatherSnapshot, onecall_data: Dict[str, Any]
) -> WeatherSnapshot:
    """–î–æ–±–∞–≤–∏—Ç—å UV-–∏–Ω–¥–µ–∫—Å –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ —Å–Ω–∏–º–æ–∫."""
    current = onecall_data.get("current", {})
    uv_index = current.get("uvi")
    alerts = onecall_data.get("alerts", [])

    return WeatherSnapshot(
        city=snapshot.city,
        country=snapshot.country,
        description=snapshot.description,
        temperature=snapshot.temperature,
        feels_like=snapshot.feels_like,
        pressure=snapshot.pressure,
        humidity=snapshot.humidity,
        wind_speed=snapshot.wind_speed,
        wind_direction=snapshot.wind_direction,
        cloudiness=snapshot.cloudiness,
        temperature_min=snapshot.temperature_min,
        temperature_max=snapshot.temperature_max,
        visibility=snapshot.visibility,
        sunrise=snapshot.sunrise,
        sunset=snapshot.sunset,
        tz=snapshot.tz,
        units=snapshot.units,
        uv_index=uv_index,
        air_quality_index=snapshot.air_quality_index,
        air_quality_components=snapshot.air_quality_components,
        weather_alerts=alerts if alerts else None,
    )


def parse_forecast_payload(
    payload: Dict[str, Any], tz: timezone, units: str
) -> List[ForecastItem]:
    """–†–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã."""
    forecast_list = payload.get("list", [])
    items = []

    for item in forecast_list:
        timestamp = datetime.fromtimestamp(item["dt"], tz=timezone.utc).astimezone(tz)
        main = item.get("main", {})
        weather_list = item.get("weather", [])
        weather_desc = weather_list[0].get("description", "") if weather_list else ""

        items.append(
            ForecastItem(
                timestamp=timestamp,
                temperature=main.get("temp", 0.0),
                feels_like=main.get("feels_like", 0.0),
                description=_format_description(weather_desc),
                humidity=main.get("humidity", 0),
                wind_speed=item.get("wind", {}).get("speed", 0.0),
                cloudiness=item.get("clouds", {}).get("all", 0),
                precipitation_probability=item.get("pop", 0.0) * 100,
                rain_volume=item.get("rain", {}).get("3h"),
                snow_volume=item.get("snow", {}).get("3h"),
            )
        )

    return items


def format_daily_forecast(
    items: List[ForecastItem], units: str, use_color: bool = True
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–Ω—è–º."""
    if not items:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞"

    temp_unit, wind_unit = UNITS_LABELS.get(units, ("¬∞", "–º/—Å"))

    
    days: Dict[str, List[ForecastItem]] = {}
    for item in items:
        day_key = item.timestamp.strftime("%Y-%m-%d")
        if day_key not in days:
            days[day_key] = []
        days[day_key].append(item)

    lines = []
    header = "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π"
    if use_color:
        header = f"{Fore.CYAN}{Style.BRIGHT}{header}{Style.RESET_ALL}"
    lines.append(header)
    lines.append("=" * 60)

    for day_key, day_items in list(days.items())[:5]:
        date_obj = datetime.strptime(day_key, "%Y-%m-%d")
        day_name = date_obj.strftime("%A, %d %B")

        temps = [item.temperature for item in day_items]
        min_temp = min(temps)
        max_temp = max(temps)
        avg_temp = sum(temps) / len(temps)

        
        descriptions = [item.description for item in day_items]
        main_desc = max(set(descriptions), key=descriptions.count)

        
        max_precip = max(item.precipitation_probability for item in day_items)

        emoji = WEATHER_EMOJI.get(main_desc.lower(), "üåà")

        if use_color:
            day_line = f"{Fore.YELLOW}{emoji} {day_name}{Style.RESET_ALL}"
        else:
            day_line = f"{emoji} {day_name}"

        lines.append(f"\n{day_line}")
        lines.append(f"  {main_desc}")
        lines.append(f"  üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {min_temp:.1f}{temp_unit} ... {max_temp:.1f}{temp_unit} (—Å—Ä–µ–¥–Ω—è—è {avg_temp:.1f}{temp_unit})")
        if max_precip > 10:
            lines.append(f"  üíß –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {max_precip:.0f}%")

    return "\n".join(lines)


def format_hourly_forecast(
    items: List[ForecastItem], units: str, use_color: bool = True
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑."""
    if not items:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞"

    temp_unit, wind_unit = UNITS_LABELS.get(units, ("¬∞", "–º/—Å"))

    lines = []
    header = "‚è∞ –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞"
    if use_color:
        header = f"{Fore.CYAN}{Style.BRIGHT}{header}{Style.RESET_ALL}"
    lines.append(header)
    lines.append("=" * 80)

    
    for item in items[:8]:
        time_str = item.timestamp.strftime("%H:%M")
        emoji = WEATHER_EMOJI.get(item.description.lower(), "üåà")

        if use_color:
            time_line = f"{Fore.YELLOW}{time_str}{Style.RESET_ALL}"
        else:
            time_line = time_str

        line = f"{time_line} {emoji} {item.temperature:>5.1f}{temp_unit}  {item.description}"

        if item.precipitation_probability > 20:
            line += f"  üíß {item.precipitation_probability:.0f}%"

        lines.append(line)

    return "\n".join(lines)


def get_uv_label(uv: float) -> Tuple[str, str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É –∏ —Ü–≤–µ—Ç –¥–ª—è UV-–∏–Ω–¥–µ–∫—Å–∞."""
    for min_val, max_val, label, color in UV_LABELS:
        if min_val <= uv <= max_val:
            return label, color
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", Fore.WHITE


def create_temperature_chart(items: List[ForecastItem], width: int = 60) -> str:
    """–°–æ–∑–¥–∞—Ç—å ASCII-–≥—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã."""
    if not items or len(items) < 2:
        return ""

    temps = [item.temperature for item in items[:8]]  
    min_temp = min(temps)
    max_temp = max(temps)
    temp_range = max_temp - min_temp if max_temp != min_temp else 1

    
    height = 10
    chart_lines = [[] for _ in range(height)]

    
    for temp in temps:
        normalized = (temp - min_temp) / temp_range
        pos = int(normalized * (height - 1))
        pos = height - 1 - pos  

        for row in range(height):
            if row == pos:
                chart_lines[row].append("‚óè")
            elif row > pos:
                chart_lines[row].append(" ")
            else:
                chart_lines[row].append(" ")

    
    lines = []
    lines.append("üìà –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (24 —á–∞—Å–∞)")
    lines.append("")

    for i, line in enumerate(chart_lines):
        temp_at_line = max_temp - (i / (height - 1)) * temp_range
        line_str = "".join(line)
        lines.append(f"{temp_at_line:>5.1f}¬∞ ‚îÇ{line_str}")

    lines.append(f"      ‚îî{'‚îÄ' * len(chart_lines[0])}")

    
    times = [item.timestamp.strftime("%H:%M") for item in items[:8]]
    time_line = "        " + "  ".join(times[::2])  
    lines.append(time_line)

    return "\n".join(lines)


def create_humidity_bar(humidity: int, width: int = 30) -> str:
    """–°–æ–∑–¥–∞—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ø–æ–ª–æ—Å–∫—É –¥–ª—è –≤–ª–∞–∂–Ω–æ—Å—Ç–∏."""
    filled = int((humidity / 100) * width)
    bar = "‚ñà" * filled + "‚ñë" * (width - filled)
    return f"[{bar}] {humidity}%"


def create_wind_arrow(degrees: int) -> str:
    """–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–µ–ª–∫—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞."""
    arrows = ["‚Üì", "‚Üô", "‚Üê", "‚Üñ", "‚Üë", "‚Üó", "‚Üí", "‚Üò"]
    index = int((degrees % 360) / 45)
    return arrows[index]


if __name__ == "__main__":
    sys.exit(main())

